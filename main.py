import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage

TOKEN = "7973940253:AAHm90XxjRD0rd3z4QDlEMwhfIStXzrXQyg"
OWNER_ID = 835935469  # ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class Form(StatesGroup):
    parent_name = State()                   # –ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è
    kid_name = State()                      # –ò–º—è —Ä–µ–±–µ–Ω–∫–∞
    contact_number = State()                # –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä
    age = State()                           # –í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞
    pregnancy = State()                     # –ö–∞–∫ –ø—Ä–æ—Ç–µ–∫–∞–ª–∞ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å? (—Ç–æ–∫—Å–∏–∫–æ–∑, —Å—Ç—Ä–µ—Å—Å—ã, —É–≥—Ä–æ–∑—ã)
    birth_term = State()                    # –ö–∞–∫–∏–º –±—ã–ª —Å—Ä–æ–∫ —Ä–æ–¥–æ–≤? (–¥–æ–Ω–æ—à–µ–Ω–Ω—ã–π, –Ω–µ–¥–æ–Ω–æ—à–µ–Ω–Ω—ã–π, –ø–µ—Ä–µ–Ω–æ—à–µ–Ω–Ω—ã–π)
    birth_process = State()                 # –ö–∞–∫ –ø—Ä–æ—à–ª–∏ —Ä–æ–¥—ã?
    birth_cry = State()                     # –ë—ã–ª–∞ –ª–∏ –∑–∞–¥–µ—Ä–∂–∫–∞ –∫—Ä–∏–∫–∞ –ø–æ—Å–ª–µ —Ä–æ–∂–¥–µ–Ω–∏—è?
    birth_weight = State()                  # –ö–∞–∫–æ–≤ –±—ã–ª –≤–µ—Å/—Ä–æ—Å—Ç –ø—Ä–∏ —Ä–æ–∂–¥–µ–Ω–∏–∏?
    head_hold = State()                     # –í–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∞–ª –¥–µ—Ä–∂–∞—Ç—å –≥–æ–ª–æ–≤—É?
    motor_development = State()             # –ö–æ–≥–¥–∞ —Å–µ–ª, –ø–æ–ø–æ–ª–∑, –ø–æ—à–µ–ª?
    speech_development = State()            # –ö–æ–≥–¥–∞ –ø–æ—è–≤–∏–ª–∏—Å—å –ø–µ—Ä–≤—ã–µ –∑–≤—É–∫–∏, —Å–ª–æ–≤–∞, —Ñ—Ä–∞–∑—ã?
    feeding = State()                       # –ë—ã–ª–∏ –ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏—è? (–≥—Ä—É–¥–Ω–æ–µ/–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–µ, –±—ã–ª–∏ –ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)
    current_difficulties = State()          # –ß—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞–∏–±–æ–ª—å—à–∏–µ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏—è?
    reaction_to_tasks = State()             # –ö–∞–∫ —Ä–µ–±–µ–Ω–æ–∫ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏?
    behavior_features = State()             # –ö–∞–∫–∏–µ –µ—Å—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è?
    social_interaction = State()            # –ö–∞–∫ —Ä–µ–±–µ–Ω–æ–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º–∏?
    sensory_sensitivity = State()           # –ö–∞–∫ —Ä–µ–±–µ–Ω–æ–∫ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç —Ç–∞–∫—Ç–∏–ª—å–Ω—ã–π, –∑–≤—É–∫–æ–≤–æ–π, –∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç?
    diagnosis = State()                     # –ö–∞–∫–∏–µ –∑–∞–∫–ª—é—á–µ–Ω–∏—è?
    treatment = State()                     # –ï—Å—Ç—å –ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ (–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã, –ø—Ä–æ—Ü–µ–¥—É—Ä—ã, –ë–ê–î—ã)?

@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ üòä\n")
    await message.answer("üìå–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é (–∏–º—è —Ñ–∞–º–∏–ª–∏—è –º–∞–º—ã/–ø–∞–ø—ã):")
    await state.set_state(Form.parent_name)

@dp.message(Form.parent_name)
async def process_age(message: Message, state: FSMContext):
    await state.update_data(parent_name=message.text)
    await message.answer("üìå–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —Ä–µ–±–µ–Ω–∫–∞:")
    await state.set_state(Form.kid_name)

@dp.message(Form.kid_name)
async def process_age(message: Message, state: FSMContext):
    await state.update_data(kid_name=message.text)
    await message.answer("üìå–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Form.contact_number)

@dp.message(Form.contact_number)
async def process_age(message: Message, state: FSMContext):
    await state.update_data(contact_number=message.text)
    await  message.answer("üìå–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞:")
    await state.set_state(Form.age)

@dp.message(Form.age)
async def process_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer("üìå–ö–∞–∫ –ø—Ä–æ—Ç–µ–∫–∞–ª–∞ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å? (—Ç–æ–∫—Å–∏–∫–æ–∑, —Å—Ç—Ä–µ—Å—Å—ã, —É–≥—Ä–æ–∑—ã, –¥—Ä—É–≥–æ–µ)")
    await state.set_state(Form.pregnancy)

@dp.message(Form.pregnancy)
async def process_pregnancy(message: Message, state: FSMContext):
    await state.update_data(pregnancy=message.text)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–æ–Ω–æ—à–µ–Ω–Ω—ã–π", callback_data="birth_term_full"),
             InlineKeyboardButton(text="–ù–µ–¥–æ–Ω–æ—à–µ–Ω–Ω—ã–π", callback_data="birth_term_preterm")],
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–Ω–æ—à–µ–Ω–Ω—ã–π", callback_data="birth_term_postterm")]
        ]
    )
    await message.answer("üìå–ö–∞–∫–∏–º –±—ã–ª —Å—Ä–æ–∫ —Ä–æ–¥–æ–≤?", reply_markup=keyboard)
    await state.set_state(Form.birth_term)

@dp.callback_query(Form.birth_term)
async def process_birth_term(callback: types.CallbackQuery, state: FSMContext):
    birth_term = callback.data.replace("birth_term_", "")
    birth_term = birth_term.replace("full", "–î–æ–Ω–æ—à–µ–Ω–Ω—ã–π")
    birth_term = birth_term.replace("preterm", "–ù–µ–¥–æ–Ω–æ—à–µ–Ω–Ω—ã–π")
    birth_term = birth_term.replace("postterm", "–ü–µ—Ä–µ–Ω–æ—à–µ–Ω–Ω—ã–π")

    await state.update_data(birth_term=birth_term)
    await callback.message.answer("üìå–ö–∞–∫ –ø—Ä–æ—à–ª–∏ —Ä–æ–¥—ã? (–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ, –∫–µ—Å–∞—Ä–µ–≤–æ —Å–µ—á–µ–Ω–∏–µ, –≥–∏–ø–æ–∫—Å–∏—è, –∞—Å—Ñ–∏–∫—Å–∏—è, —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω—ã–µ, –∑–∞—Ç—è–∂–Ω—ã–µ –∏ —Ç.–¥.)")
    await state.set_state(Form.birth_process)
    await callback.answer()

@dp.message(Form.birth_process)
async def process_birth_process(message: Message, state: FSMContext):
    await state.update_data(birth_process=message.text)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="birth_cry_yes"),
             InlineKeyboardButton(text="–ù–µ—Ç", callback_data="birth_cry_no")],
            [InlineKeyboardButton(text="–ù–µ—Ç —á–µ—Ç–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞", callback_data="birth_cry_uncertain")]
        ]
    )
    await message.answer("üìå–ë—ã–ª–∞ –ª–∏ –∑–∞–¥–µ—Ä–∂–∫–∞ –∫—Ä–∏–∫–∞ –ø–æ—Å–ª–µ —Ä–æ–∂–¥–µ–Ω–∏—è?", reply_markup=keyboard)
    await state.set_state(Form.birth_cry)

@dp.callback_query(Form.birth_cry)
async def process_birth_cry(callback: types.callback_query, state: FSMContext):
    birth_cry = callback.data.replace("birth_cry_", "")
    birth_cry = birth_cry.replace("yes", "–î–∞")
    birth_cry = birth_cry.replace("no", "–ù–µ—Ç")
    birth_cry = birth_cry.replace("uncertain", "–ù–µ—Ç —á–µ—Ç–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
    await state.update_data(birth_cry=birth_cry)
    await callback.message.answer("üìå–ö–∞–∫–æ–≤ –±—ã–ª –≤–µ—Å/—Ä–æ—Å—Ç –ø—Ä–∏ —Ä–æ–∂–¥–µ–Ω–∏–∏?")
    await state.set_state(Form.birth_weight)
    await callback.answer()

@dp.message(Form.birth_weight)
async def process_birth_weight(message: Message, state: FSMContext):
    await state.update_data(birth_weight=message.text)
    await message.answer("üìå–í–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∞–ª –¥–µ—Ä–∂–∞—Ç—å –≥–æ–ª–æ–≤—É?")
    await state.set_state(Form.head_hold)


@dp.message(Form.head_hold)
async def process_motor_development(message: Message, state: FSMContext):
    await state.update_data(motor_development=message.text)
    await message.answer("üìå–ö–æ–≥–¥–∞ —Å–µ–ª, –ø–æ–ø–æ–ª–∑, –ø–æ—à–µ–ª?")
    await state.set_state(Form.motor_development)

@dp.message(Form.motor_development)
async def process_speech_development(message: Message, state: FSMContext):
    await state.update_data(speech_development=message.text)
    await message.answer("üìå–ö–æ–≥–¥–∞ –ø–æ—è–≤–∏–ª–∏—Å—å –ø–µ—Ä–≤—ã–µ –∑–≤—É–∫–∏, —Å–ª–æ–≤–∞, —Ñ—Ä–∞–∑—ã?")
    await state.set_state(Form.speech_development)

@dp.message(Form.speech_development)
async def process_speech_development(message: Message, state: FSMContext):
    await state.update_data(speech_development=message.text)
    await message.answer("üìå–ë—ã–ª–∏ –ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏—è? (–≥—Ä—É–¥–Ω–æ–µ/–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–µ, –±—ã–ª–∏ –ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)")
    await state.set_state(Form.feeding)

@dp.message(Form.feeding)
async def process_feeding(message: Message, state: FSMContext):
    await state.update_data(feeding=message.text)
    await message.answer("üìå–ö–∞–∫–∏–µ –µ—Å—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —É —Ä–µ–±–µ–Ω–∫–∞?\nüîπ–†–µ—á—å –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è\nüîπ–í–Ω–∏–º–∞–Ω–∏–µ –∏ —É—Å–∏–¥—á–∏–≤–æ—Å—Ç—å\nüîπ–ü–∞–º—è—Ç—å –∏ –º—ã—à–ª–µ–Ω–∏–µ\nüîπ–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–≥—É–ª—è—Ü–∏—è\nüîπ–°–µ–Ω—Å–æ—Ä–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\nüîπ–ú–æ—Ç–æ—Ä–∏–∫–∞ (–∫—Ä—É–ø–Ω–∞—è, –º–µ–ª–∫–∞—è, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è)\nüîπ–ü–æ–≤–µ–¥–µ–Ω–∏–µ (–∞–≥—Ä–µ—Å—Å–∏—è, –∏—Å—Ç–µ—Ä–∏–∫–∏, —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å, –∑–∞–º–∫–Ω—É—Ç–æ—Å—Ç—å)")
    await state.set_state(Form.current_difficulties)

@dp.message(Form.current_difficulties)
async def process_reaction_to_tasks(message: Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–° –∏–Ω—Ç–µ—Ä–µ—Å–æ–º", callback_data="reaction_interest"),
             InlineKeyboardButton(text="–ò–∑–±–µ–≥–∞–µ—Ç", callback_data="reaction_avoidance")],
            [InlineKeyboardButton(text="–ë—ã—Å—Ç—Ä–æ —É—Å—Ç–∞–µ—Ç", callback_data="reaction_fatigue")]
        ]
    )
    await message.answer("üìå–ö–∞–∫ —Ä–µ–±–µ–Ω–æ–∫ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏?", reply_markup=keyboard)
    await state.set_state(Form.reaction_to_tasks)

@dp.callback_query(Form.reaction_to_tasks)
async def process_reaction_to_tasks(callback: types.callback_query, state: FSMContext):
    reaction_to_tasks = callback.data.replace("reaction_", "")
    reaction_to_tasks = reaction_to_tasks.replace("interest", "–° –∏–Ω—Ç–µ—Ä–µ—Å–æ–º")
    reaction_to_tasks = reaction_to_tasks.replace("avoidance", "–ò–∑–±–µ–≥–∞–µ—Ç")
    reaction_to_tasks = reaction_to_tasks.replace("fatigue", "–ë—ã—Å—Ç—Ä–æ —É—Å—Ç–∞–µ—Ç")
    await state.update_data(reaction_to_tasks=reaction_to_tasks)
    await callback.message.answer("üìå–ö–∞–∫–∏–µ –µ—Å—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è?\nüîπ–ì–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å / –∑–∞—Ç–æ—Ä–º–æ–∂–µ–Ω–Ω–æ—Å—Ç—å\nüîπ–°–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ —Å–º–µ–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\nüîπ–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å, —Å—Ç—Ä–∞—Ö–∏\nüîπ–ê–≥—Ä–µ—Å—Å–∏—è, —Å–∞–º–æ–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ\nüîπ–°—Ç–∏–º–º–∏–Ω–≥–∏ (–º–∞—Ö–∞–Ω–∏–µ —Ä—É–∫–∞–º–∏, —Ä–∞—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –¥–≤–∏–∂–µ–Ω–∏—è)")
    await state.set_state(Form.behavior_features)
    await callback.answer()

@dp.message(Form.behavior_features)
async def process_behavior_features(message: Message, state: FSMContext):
    await state.update_data(behavior_features=message.text)
    await message.answer("üìå–ö–∞–∫ —Ä–µ–±–µ–Ω–æ–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º–∏?\nüîπ–û—Ö–æ—Ç–Ω–æ –∏–¥–µ—Ç –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥\nüîπ–û–±—â–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–æ –≤–∑—Ä–æ—Å–ª—ã–º–∏, –∏–∑–±–µ–≥–∞–µ—Ç –¥–µ—Ç–µ–π\nüîπ–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∏–≥—Ä—ã\nüîπ–ï—Å—Ç—å –ª–∏ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∏–º—è?")
    await state.set_state(Form.social_interaction)

@dp.message(Form.social_interaction)
async def process_social_interaction(message: Message, state: FSMContext):
    await state.update_data(social_interaction=message.text)
    await message.answer("üìå–ö–∞–∫ —Ä–µ–±–µ–Ω–æ–∫ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç —Ç–∞–∫—Ç–∏–ª—å–Ω—ã–π, –∑–≤—É–∫–æ–≤–æ–π, –∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç?\nüîπ–õ—é–±–∏—Ç / –∏–∑–±–µ–≥–∞–µ—Ç –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–π\nüîπ–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ –≥—Ä–æ–º–∫–∏–º –∑–≤—É–∫–∞–º / –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç\nüîπ–ò–∑–±–µ–≥–∞–µ—Ç / –∏—â–µ—Ç –∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç")
    await state.set_state(Form.sensory_sensitivity)

@dp.message(Form.sensory_sensitivity)
async def process_sensory_sensitivity(message: Message, state: FSMContext):
    await state.update_data(sensory_sensitivity=message.text)
    await message.answer("üìå–ö–∞–∫–∏–µ –µ—Å—Ç—å –¥–∏–∞–≥–Ω–æ–∑—ã, –∑–∞–∫–ª—é—á–µ–Ω–∏—è?")
    await state.set_state(Form.diagnosis)

@dp.message(Form.diagnosis)
async def process_diagnosis(message: Message, state: FSMContext):
    await state.update_data(diagnosis=message.text)
    await message.answer("üìå–ï—Å—Ç—å –ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ (–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã, –ø—Ä–æ—Ü–µ–¥—É—Ä—ã, –ë–ê–î—ã)?")
    await state.set_state(Form.treatment)

questions = {
    "parent_name": "‚úÖ–ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è:",
    "kid_name": "‚úÖ–ò–º—è —Ä–µ–±–µ–Ω–∫–∞:",
    "contact_number": "‚úÖ–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
    "age": "‚úÖ–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞:",
    "pregnancy": "‚úÖ–ö–∞–∫ –ø—Ä–æ—Ç–µ–∫–∞–ª–∞ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å?",
    "birth_term": "‚úÖ–ö–∞–∫–∏–º –±—ã–ª —Å—Ä–æ–∫ —Ä–æ–¥–æ–≤?",
    "birth_process": "‚úÖ–ö–∞–∫ –ø—Ä–æ—à–ª–∏ —Ä–æ–¥—ã?",
    "birth_cry": "‚úÖ–ë—ã–ª–∞ –ª–∏ –∑–∞–¥–µ—Ä–∂–∫–∞ –∫—Ä–∏–∫–∞ –ø–æ—Å–ª–µ —Ä–æ–∂–¥–µ–Ω–∏—è?",
    "birth_weight": "‚úÖ–ö–∞–∫–æ–≤ –±—ã–ª –≤–µ—Å/—Ä–æ—Å—Ç –ø—Ä–∏ —Ä–æ–∂–¥–µ–Ω–∏–∏?",
    "head_hold": "‚úÖ–í–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∞–ª –¥–µ—Ä–∂–∞—Ç—å –≥–æ–ª–æ–≤—É?",
    "motor_development": "‚úÖ–ö–æ–≥–¥–∞ —Å–µ–ª, –ø–æ–ø–æ–ª–∑, –ø–æ—à–µ–ª?",
    "speech_development": "‚úÖ–ö–æ–≥–¥–∞ –ø–æ—è–≤–∏–ª–∏—Å—å –ø–µ—Ä–≤—ã–µ –∑–≤—É–∫–∏, —Å–ª–æ–≤–∞, —Ñ—Ä–∞–∑—ã?",
    "feeding": "‚úÖ–ë—ã–ª–∏ –ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏—è?",
    "current_difficulties": "‚úÖ–ß—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞–∏–±–æ–ª—å—à–∏–µ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏—è?",
    "reaction_to_tasks": "‚úÖ–ö–∞–∫ —Ä–µ–±–µ–Ω–æ–∫ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏?",
    "behavior_features": "‚úÖ–ö–∞–∫–∏–µ –µ—Å—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è?",
    "social_interaction": "‚úÖ–ö–∞–∫ —Ä–µ–±–µ–Ω–æ–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º–∏?",
    "sensory_sensitivity": "‚úÖ–ö–∞–∫ —Ä–µ–±–µ–Ω–æ–∫ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç —Ç–∞–∫—Ç–∏–ª—å–Ω—ã–π, –∑–≤—É–∫–æ–≤–æ–π, –∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç?",
    "diagnosis": "‚úÖ–ö–∞–∫–∏–µ –¥–∏–∞–≥–Ω–æ–∑—ã?",
    "treatment": "‚úÖ–ï—Å—Ç—å –ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ?",
}

@dp.message(Form.treatment)
async def process_treatment(message: Message, state: FSMContext):
    user_data = await state.update_data(treatment=message.text)
    await state.clear()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–æ–ø—Ä–æ—Å/–æ—Ç–≤–µ—Ç
    result_text = "\n".join([f"{questions[key]} {value}" for key, value in user_data.items()])

    await bot.send_message(OWNER_ID, f"üìã –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:\n\n{result_text}")
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.üòÅ")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
